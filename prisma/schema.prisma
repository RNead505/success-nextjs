// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for admin authentication
model User {
  id               String        @id @default(cuid())
  name             String
  email            String        @unique
  password         String
  role             UserRole      @default(EDITOR)
  bio              String?
  avatar           String?
  stripeCustomerId String?       @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  posts            Post[]
  subscription     Subscription?
  bookmarks        Bookmark[]
  readingProgress  ReadingProgress[]
  activities       UserActivity[]
  editorialItems   EditorialCalendar[]
  activityLogs     ActivityLog[]
  bulkActions      BulkAction[]

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
  AUTHOR
}

// Post model (articles/blog posts)
model Post {
  id                String      @id @default(cuid())
  title             String
  slug              String      @unique
  content           String      @db.Text
  excerpt           String?     @db.Text
  featuredImage     String?
  featuredImageAlt  String?
  status            PostStatus  @default(DRAFT)
  authorId          String
  author            User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories        Category[]  @relation("PostCategories")
  tags              Tag[]       @relation("PostTags")
  publishedAt       DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  seoTitle          String?
  seoDescription    String?
  readTime          Int?        // in minutes
  views             Int         @default(0)

  @@map("posts")
  @@index([slug])
  @@index([status])
  @@index([publishedAt])
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Category model
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  posts       Post[]    @relation("PostCategories")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
  @@index([slug])
}

// Tag model
model Tag {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  posts     Post[]    @relation("PostTags")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("tags")
  @@index([slug])
}

// Media library
model Media {
  id        String      @id @default(cuid())
  filename  String
  url       String
  mimeType  String
  size      Int         // in bytes
  width     Int?
  height    Int?
  alt       String?
  uploadedBy String
  createdAt DateTime    @default(now())

  @@map("media")
}

// Static pages (About, Magazine, etc.)
model Page {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String      @db.Text
  status      PostStatus  @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  seoTitle    String?
  seoDescription String?

  @@map("pages")
  @@index([slug])
}

// Videos
model Video {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String?     @db.Text
  videoUrl    String
  thumbnail   String?
  duration    Int?        // in seconds
  status      PostStatus  @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("videos")
  @@index([slug])
}

// Podcasts
model Podcast {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String?     @db.Text
  audioUrl    String
  thumbnail   String?
  duration    Int?        // in seconds
  status      PostStatus  @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("podcasts")
  @@index([slug])
}

// Newsletter Subscribers
model NewsletterSubscriber {
  id           String   @id @default(cuid())
  email        String   @unique
  status       SubscriberStatus  @default(ACTIVE)
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("newsletter_subscribers")
  @@index([email])
  @@index([status])
}

enum SubscriberStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
}

// Site Settings
model SiteSettings {
  id                      String   @id @default(cuid())
  siteName                String   @default("SUCCESS Magazine")
  siteDescription         String?  @db.Text
  siteUrl                 String?
  adminEmail              String?
  facebookUrl             String?
  twitterUrl              String?
  instagramUrl            String?
  linkedinUrl             String?
  youtubeUrl              String?
  wordpressApiUrl         String?
  wordpressApiKey         String?
  defaultMetaTitle        String?
  defaultMetaDescription  String?  @db.Text
  googleAnalyticsId       String?
  facebookPixelId         String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("site_settings")
}

// Subscriptions (SUCCESS+ membership)
model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId     String?            @unique
  stripeSubscriptionId String?            @unique
  stripePriceId        String?
  status               SubscriptionStatus @default(INACTIVE)
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  TRIALING
}

// Magazine model for storing uploaded PDFs
model Magazine {
  id             String   @id @default(cuid())
  title          String
  slug           String   @unique
  publishedText  String   // e.g., "JANUARY 2025"
  description    String?  @db.Text
  pdfUrl         String   // URL to the PDF file
  coverImageUrl  String?  // URL to cover image
  fileSize       Int      // PDF file size in bytes
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("magazines")
  @@index([slug])
}

// CRM Contact model
model Contact {
  id              String         @id @default(cuid())
  email           String         @unique
  firstName       String?
  lastName        String?
  phone           String?
  company         String?
  tags            String[]       // Array of tags
  status          ContactStatus  @default(ACTIVE)
  source          String?        // Where they came from (newsletter, form, etc.)
  notes           String?        @db.Text
  lastContactedAt DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  emailLogs       EmailLog[]
  campaignContacts CampaignContact[]

  @@map("contacts")
  @@index([email])
  @@index([status])
}

enum ContactStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
  SPAM
}

// Email Campaign (Drip Campaign)
model Campaign {
  id          String         @id @default(cuid())
  name        String
  subject     String
  status      CampaignStatus @default(DRAFT)
  templateId  String?
  template    EmailTemplate? @relation(fields: [templateId], references: [id])
  scheduledAt DateTime?
  sentAt      DateTime?
  totalSent   Int            @default(0)
  totalOpened Int            @default(0)
  totalClicked Int           @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  contacts    CampaignContact[]
  emails      DripEmail[]

  @@map("campaigns")
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
}

// Drip Email (part of a campaign sequence)
model DripEmail {
  id          String   @id @default(cuid())
  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  name        String
  subject     String
  content     String   @db.Text
  delayDays   Int      @default(0) // Days after previous email
  order       Int      // Order in sequence
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("drip_emails")
}

// Junction table for Campaign and Contact
model CampaignContact {
  id         String   @id @default(cuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contactId  String
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  status     String   @default("pending") // pending, sent, opened, clicked
  sentAt     DateTime?
  openedAt   DateTime?
  clickedAt  DateTime?
  createdAt  DateTime @default(now())

  @@unique([campaignId, contactId])
  @@map("campaign_contacts")
}

// Email Template
model EmailTemplate {
  id        String     @id @default(cuid())
  name      String
  subject   String
  content   String     @db.Text
  isDefault Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  campaigns Campaign[]

  @@map("email_templates")
}

// Email Log (track all sent emails)
model EmailLog {
  id          String   @id @default(cuid())
  contactId   String
  contact     Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  subject     String
  content     String   @db.Text
  status      String   // sent, delivered, opened, clicked, bounced, failed
  sentAt      DateTime @default(now())
  openedAt    DateTime?
  clickedAt   DateTime?
  bouncedAt   DateTime?
  errorMessage String?

  @@map("email_logs")
  @@index([contactId])
  @@index([status])
}

// Bookmarks - Users can save articles for later
model Bookmark {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId   String   // WordPress post ID or slug
  articleTitle String
  articleUrl  String
  articleImage String?
  createdAt   DateTime @default(now())

  @@unique([userId, articleId])
  @@map("bookmarks")
  @@index([userId])
}

// Reading Progress - Track how much of an article a user has read
model ReadingProgress {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId   String   // WordPress post ID or slug
  articleTitle String
  articleUrl  String
  progress    Int      // Percentage (0-100)
  completed   Boolean  @default(false)
  lastReadAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, articleId])
  @@map("reading_progress")
  @@index([userId])
  @@index([completed])
}

// User Activity - Track user actions for activity feed
model UserActivity {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityType ActivityType
  title       String       // E.g., "Read 'How to Be Successful'"
  description String?
  metadata    String?      @db.Text // JSON data
  createdAt   DateTime     @default(now())

  @@map("user_activities")
  @@index([userId])
  @@index([activityType])
  @@index([createdAt])
}

enum ActivityType {
  ARTICLE_READ
  ARTICLE_BOOKMARKED
  VIDEO_WATCHED
  PODCAST_LISTENED
  ACHIEVEMENT_UNLOCKED
  SUBSCRIPTION_STARTED
}

// SEO Settings - Complete SEO management
model SEOSettings {
  id                      String   @id @default(cuid())
  siteTitle               String   @default("SUCCESS Magazine")
  siteDescription         String   @default("Your Guide to Personal and Professional Growth")
  siteKeywords            String   @default("success, business, entrepreneurship, leadership, personal development")
  ogImage                 String   @default("https://www.success.com/og-image.jpg")
  ogType                  String   @default("website")
  twitterHandle           String   @default("@successmagazine")
  twitterCardType         String   @default("summary_large_image")
  googleAnalyticsId       String?
  googleSearchConsoleCode String?
  bingWebmasterCode       String?
  facebookDomainVerification String?
  sitemapUrl              String   @default("/api/sitemap.xml")
  robotsTxt               String   @default("User-agent: *\nAllow: /") @db.Text
  canonicalUrl            String?
  hreflangTags            String?  @db.Text // JSON array of hreflang entries
  schemaOrgMarkup         String?  @db.Text // JSON-LD structured data
  headerScripts           String?  @db.Text // Custom scripts for <head>
  footerScripts           String?  @db.Text // Custom scripts before </body>
  faviconUrl              String?
  appleTouchIconUrl       String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("seo_settings")
}

// Content Analytics - Track performance metrics
model ContentAnalytics {
  id              String   @id @default(cuid())
  contentType     String   // post, page, video, podcast
  contentId       String   // WordPress ID or internal ID
  contentSlug     String
  contentTitle    String
  views           Int      @default(0)
  uniqueVisitors  Int      @default(0)
  avgTimeOnPage   Int      @default(0) // in seconds
  bounceRate      Float    @default(0.0)
  socialShares    Int      @default(0)
  comments        Int      @default(0)
  bookmarks       Int      @default(0)
  date            DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([contentType, contentId, date])
  @@map("content_analytics")
  @@index([contentType])
  @@index([contentSlug])
  @@index([date])
}

// Editorial Calendar - Content planning
model EditorialCalendar {
  id              String           @id @default(cuid())
  title           String
  contentType     ContentType      @default(ARTICLE)
  assignedToId    String?
  assignedTo      User?            @relation(fields: [assignedToId], references: [id])
  categoryId      String?
  status          EditorialStatus  @default(IDEA)
  scheduledDate   DateTime?
  publishDate     DateTime?
  deadline        DateTime?
  priority        Priority         @default(MEDIUM)
  notes           String?          @db.Text
  wordpressId     String?          // Link to WordPress post if published
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("editorial_calendar")
  @@index([status])
  @@index([scheduledDate])
  @@index([assignedToId])
}

enum ContentType {
  ARTICLE
  VIDEO
  PODCAST
  MAGAZINE
  PAGE
  NEWSLETTER
}

enum EditorialStatus {
  IDEA
  ASSIGNED
  IN_PROGRESS
  DRAFT
  IN_REVIEW
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Activity Log - Track all admin actions
model ActivityLog {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  action      String       // CREATE, UPDATE, DELETE, LOGIN, SYNC, etc.
  entity      String       // post, page, user, settings, etc.
  entityId    String?      // ID of the affected entity
  details     String?      @db.Text // JSON string with additional details
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime     @default(now())

  @@map("activity_logs")
  @@index([userId])
  @@index([action])
  @@index([entity])
  @@index([createdAt])
}

// Bulk Actions - Track batch operations
model BulkAction {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  action      String       // DELETE, PUBLISH, DRAFT, etc.
  entity      String       // posts, pages, media, etc.
  entityIds   String[]     // Array of affected IDs
  status      BulkStatus   @default(PENDING)
  totalItems  Int
  processedItems Int       @default(0)
  errors      String[]     @default([])
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime     @default(now())

  @@map("bulk_actions")
  @@index([userId])
  @@index([status])
}

enum BulkStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Comments - For moderation
model Comment {
  id          String        @id @default(cuid())
  postId      String        // WordPress post ID or internal post ID
  postTitle   String
  author      String
  authorEmail String
  authorUrl   String?
  content     String        @db.Text
  status      CommentStatus @default(PENDING)
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("comments")
  @@index([postId])
  @@index([status])
  @@index([authorEmail])
}

enum CommentStatus {
  PENDING
  APPROVED
  SPAM
  TRASH
}
